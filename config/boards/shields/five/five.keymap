/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>


#define DFLT      0
#define SYMBOLS   1
#define EXTRA     2
#define GAMING    3
#define NAV       4
#define SYSTEM    5


/ {
    behaviors {
        hpl: hold_preferred_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREFERRED_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;
        };
        bll: balanced_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };
        tpl: tap_preferred_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_REFERRED_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        hpm: hold_preferred_modifier {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_MODIFIER";
            #binding-cells = <2>;
            tapping-term-ms = <100>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
        };
        bpm: balanced_modifier {
            compatible = "zmk,behavior-hold-tap";
            label = "BALANCED_MODIFIER";
            #binding-cells = <2>;
            tapping-term-ms = <140>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        tpm: tap_preferred_modifier {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_REFERRED_MODIFIER";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_print_screen_r_t {
            timeout-ms = <50>;
            key-positions = <3 4>;
            bindings = <&kp PSCRN>;
            layers = <EXTRA SYMBOLS SYSTEM NAV>;
        };
        combo_esc_d_f {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp ESC>;
            layers = <DFLT>;
        };
        combo_esc_j_k {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
            layers = <DFLT>;
        };
        combo_caps_word_x_c {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&caps_word>;
            layers = <DFLT>;
        };
        combo_dflt_to_nav_c_v {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&to NAV>;
            layers = <DFLT>;
        };
        combo_nav_to_dflt_c_v {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&to DFLT>;
            layers = <NAV>;
        };
        combo_sym_to_dflt_m_comma {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&to SYMBOLS>;
            layers = <DFLT>;
        };
        combo_dflt_to_sym_m_comma {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&to DFLT>;
            layers = <SYMBOLS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &tpm LALT Q      &kp W           &kp E           &kp R           &kp T               &kp Y           &kp U           &kp I           &kp O           &tpm LALT P
                &bpm LSHIFT A    &tpm LCTRL S    &tpm LALT D     &kp F           &kp G               &kp H           &kp J           &kp K           &kp L           &bpm LSHIFT SQT
                &tpm LCTRL Z     &tpm LGUI X     &kp C           &kp V           &kp B               &kp N           &tpm LCTRL M    &kp COMMA       &tpm LGUI DOT   &tpm LCTRL SLASH
                                                                 &hpl EXTRA TAB  &bll SYMBOLS SPACE  &kp BACKSPACE   &kp LCTRL
            >;
        };

        symbols_layer {
            bindings = <
                &tpm LALT EXCL   &kp AT          &kp HASH        &kp DOLLAR      &kp PERCENT         &kp CARET       &kp N7          &kp N8          &kp N9          &tpm LALT MINUS
                &bpm LSHIFT GRAVE &tpm LCTRL EQUAL &tpm LALT UNDER &kp COLON     &kp LPAR            &kp RPAR        &kp N4          &kp N5          &kp N6          &bpm LSHIFT N0
                &tpm LCTRL BACKSLASH &tpm LGUI AMPS  &kp STAR    &kp SEMI        &kp LBKT            &kp RBKT        &kp N1          &tpm LCTRL N2   &tpm LGUI N3    &tpm LCTRL DOT
                                                                 &trans          &trans              &trans          &kp DELETE
            >;
        };

        extra_layer {
            bindings = <
                &tpm LALT LC(N1) &kp LC(N2)      &kp LC(N3)      &kp LC(N4)      &tpl SYSTEM INSERT  &kp INSERT      &kp HOME        &kp END         &sk PAGE_UP     &tpm LALT PAGE_UP
                &kp LSHIFT       &tpm LCTRL TAB  &tpm LALT ENTER &kp ESCAPE      &trans              &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &kp LSHIFT
                &tpm LCTRL LC(Z) &tpm LGUI C_VOL_DN &kp C_VOL_UP &kp C_PP        &kp C_NEXT          &trans          &trans          &trans          &trans          &kp LCTRL
                                                                 &trans          &to GAMING          &trans          &kp DELETE
            >;
        };

        gaming_layer {
            bindings = <
                &kp TAB         &kp Q           &kp W           &kp E           &kp R            &kp T              &kp N7          &kp N8          &kp N9          &kp MINUS
                &kp LSHIFT      &kp A           &kp S           &kp D           &kp F            &kp G              &kp N4          &kp N5          &kp N6          &kp N0
                &kp LALT        &kp Z           &kp X           &kp C           &mo NAV          &kp B              &kp N1          &kp N2          &kp N3          &kp DOT
                                                                &kp LCTRL       &kp SPACE        &to DFLT           &trans
            >;
        };

        nav_layer {
            bindings = <
                &kp N1          &kp N2          &kp N3          &kp N4          &kp N5            &kp INSERT      &kp HOME        &kp END         &sk PAGE_UP     &tpm LALT LC(LS(TAB))
                &kp MINUS       &kp LEFT        &kp UP          &kp DOWN        &kp RIGHT         &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT       &tpm LSHIFT LC(TAB)
                &kp N6          &kp N7          &kp N8          &kp N9          &kp N0            &none           &kp ESCAPE      &kp ENTER       &kp TAB         &kp LCTRL
                                                                &to DFLT        &kp SPACE         &kp BACKSPACE   &trans
            >;
        };

        system_layer {
            bindings = <
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &trans             &trans           &kp F1          &kp F2          &kp F3          &kp F10
                &trans          &out OUT_USB    &out OUT_BLE    &trans          &reset             &trans           &kp F4          &kp F5          &kp F6          &kp F11
                &bootloader     &bt BT_CLR      &trans          &trans          &trans             &trans           &kp F7          &kp F8          &kp F9          &kp F12
                                                                &trans          &trans             &trans           &bootloader

            >;
        };

/*
        trans_layer {
            bindings = <
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans          &trans
                                                                &trans          &trans          &trans          &trans
            >;
        };
*/
    };
};
